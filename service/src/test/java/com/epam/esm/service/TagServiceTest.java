package com.epam.esm.service;

import com.epam.esm.dto.TagCostDto;
import com.epam.esm.entity.Tag;
import com.epam.esm.exception.ResourceAlreadyExistsException;
import com.epam.esm.exception.ResourceNotFoundException;
import com.epam.esm.hibernate.TagDao;
import com.epam.esm.validator.TagValidator;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

public class TagServiceTest {

    private final TagDao tagDao = Mockito.mock(TagDao.class);
    private final TagValidator tagValidator = Mockito.mock(TagValidator.class);
    private final TagService tagService = new TagService(tagDao, tagValidator);

    private final List<Tag> tags = new ArrayList<>();
    private final Tag tag = new Tag();
    private final long tagId = 1L;
    private final long userId = 2L;
    private final String name = "tag";
    private final Optional<Tag> optionalTag = Optional.of(tag);

    @Test
    public void testShouldGetAllTagsWhenPaginationParametersAreAccurate() {
        int limit = 3;
        int offset = 2;
        Mockito.when(tagDao.getAll(limit, offset)).thenReturn(tags);

        List<Tag> actual = tagService.getAll(limit, offset);

        Assertions.assertEquals(tags, actual);
    }

    @Test
    public void testShouldThrowExceptionWhenPaginationParametersAreNegativeOnGetAllTags() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            int limit = -1;
            int offset = -5;

            tagService.getAll(limit, offset);
        });
    }

    @Test
    public void testShouldGetTagById() {
        Mockito.when(tagDao.getById(tagId)).thenReturn(optionalTag);

        Tag actual = tagService.getById(tagId);

        Assertions.assertEquals(tag, actual);
    }

    @Test
    public void testShouldThrowExceptionWhenTagWasNotFoundById() {
        Assertions.assertThrows(ResourceNotFoundException.class, () -> {
            Mockito.when(tagDao.getById(tagId)).thenReturn(Optional.empty());

            tagService.getById(tagId);
        });
    }

    @Test
    public void testShouldGetTagByName() {
        Mockito.when(tagDao.getByName(name)).thenReturn(optionalTag);

        Tag actual = tagService.getByName(name);

        Assertions.assertEquals(tag, actual);
    }

    @Test
    public void testShouldThrowExceptionWhenTagWasNotFoundByName() {
        Assertions.assertThrows(ResourceNotFoundException.class, () -> {
            Mockito.when(tagDao.getByName(name)).thenReturn(Optional.empty());

            tagService.getByName(name);
        });
    }

    @Test
    public void testShouldGetMostWidelyUsedTagOfUserWithHighestCostOfOrders() {
        TagCostDto tagCost = new TagCostDto();
        Optional<TagCostDto> optionalTagCost = Optional.of(tagCost);
        Mockito.when(tagDao.getMostWidelyUsedTagOfUserWithHighestCostOfOrders(userId)).thenReturn(optionalTagCost);

        TagCostDto actual = tagService.getMostWidelyUsedTagOfUserWithHighestCostOfOrders(userId);

        Assertions.assertEquals(tagCost, actual);
    }

    @Test
    public void testShouldThrowExceptionWhenMostWidelyUsedTagWasNotFound() {
        Assertions.assertThrows(ResourceNotFoundException.class, () -> {
            Mockito.when(tagDao.getMostWidelyUsedTagOfUserWithHighestCostOfOrders(userId)).thenReturn(Optional.empty());

            tagService.getMostWidelyUsedTagOfUserWithHighestCostOfOrders(userId);
        });
    }

    @Test
    public void testShouldReturnTagIdWhenCreateTag() {
        tag.setName(name);
        Mockito.doNothing().when(tagValidator).validateForCreation(tag);
        Mockito.when(tagDao.getByName(name)).thenReturn(Optional.empty());
        Mockito.when(tagDao.create(tag)).thenReturn(tagId);

        long actualTagId = tagService.create(tag);

        Assertions.assertEquals(tagId, actualTagId);
    }

    @Test
    public void testShouldThrowExceptionWhenTagWithSameNameExistsInCreateTag() {
        Assertions.assertThrows(ResourceAlreadyExistsException.class, () -> {
            tag.setName(name);
            Mockito.when(tagDao.getByName(name)).thenReturn(Optional.of(tag));

            tagService.create(tag);
        });
    }

    @Test
    public void testShouldReturnTagIdsWhenCreateTagsIfNotCreated() {
        tag.setName(name);
        List<Tag> tags = Collections.singletonList(tag);
        Mockito.doNothing().when(tagValidator).validateForCreation(tag);
        Mockito.when(tagDao.getByName(name)).thenReturn(Optional.empty());
        List<Long> expectedAutoGeneratedIds = Collections.singletonList(tagId);
        Mockito.when(tagDao.create(tag)).thenReturn(tagId);

        List<Long> actualAutoGeneratedIds = tagService.createTagsIfNotCreated(tags);

        Assertions.assertEquals(expectedAutoGeneratedIds, actualAutoGeneratedIds);
    }

    @Test
    public void testShouldReturnTagIdsWhenCreatedTagsIfCreated() {
        tag.setId(tagId);
        tag.setName(name);
        List<Tag> tags = Collections.singletonList(tag);
        Mockito.doNothing().when(tagValidator).validateForCreation(tag);
        Mockito.when(tagDao.getByName(name)).thenReturn(optionalTag);
        List<Long> expectedAutoGeneratedIds = Collections.singletonList(tagId);

        List<Long> actualAutoGeneratedIds = tagService.createTagsIfNotCreated(tags);

        Assertions.assertEquals(expectedAutoGeneratedIds, actualAutoGeneratedIds);
    }

    @Test
    public void testShouldGetTagsByListOfIds() {
        List<Long> tagIds = Collections.singletonList(tagId);
        tag.setId(tagId);
        tag.setName(name);
        Mockito.when(tagDao.getById(tagId)).thenReturn(Optional.of(tag));
        List<Tag> expected = Collections.singletonList(tag);

        List<Tag> actual = tagService.getTagsByListOfIds(tagIds);

        Assertions.assertEquals(expected, actual);
    }

    @Test
    public void testShouldDoNothingWhenDeleteTag() {
        Mockito.when(tagDao.getById(tagId)).thenReturn(optionalTag);
        Mockito.doNothing().when(tagDao).delete(tagId);

        tagService.delete(tagId);
    }

    @Test
    public void testShouldThrowExceptionWhenDeleteNonExistentTag() {
        Assertions.assertThrows(ResourceNotFoundException.class, () -> {
            Mockito.when(tagDao.getById(tagId)).thenReturn(Optional.empty());

            tagService.delete(tagId);
        });
    }
}
